// detecting cycle in directed graph and printing it

class Solution {
private:
    vector<int> cyclePath;
    bool dfsCheck(int node, vector<int> adj[], int vis[], int pathVis[], int parent[]) {
        vis[node] = 1;
        pathVis[node] = 1;
        for (auto it : adj[node]) {
            if (!vis[it]) {
                parent[it] = node;
                if (dfsCheck(it, adj, vis, pathVis, parent) == true)
                    return true;            }
            else if (pathVis[it]) {
                cyclePath.push_back(it);
                int curr = node;
                while (curr != it) {
                    cyclePath.push_back(curr);
                    curr = parent[curr];                }
                cyclePath.push_back(it); 
                return true;
            }        }
        pathVis[node] = 0;
        return false;    }
public:
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V] = {0};
        int pathVis[V] = {0};
        int parent[V];
        for (int i = 0; i < V; i++) parent[i] = -1;
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (dfsCheck(i, adj, vis, pathVis, parent) == true) {
                    cout << "Cycle Detected: ";
                    for (int j = cyclePath.size() - 1; j >= 0; j--) {
                        cout << cyclePath[j] << " ";
                    }
                    cout << endl;
                    return true;
                }
            }
        }
        return false;
    }
};


// just detecting in cycle in a directed graph

class Solution {
private:
    vector<int> cyclePath;

    bool dfsCheck(int node, vector<int> adj[], int vis[], int pathVis[]) {
        vis[node] = 1;
        pathVis[node] = 1;

        for (auto it : adj[node]) {
            if (!vis[it]) {
                if (dfsCheck(it, adj, vis, pathVis, parent)) {
                    return true;
                }
            } else if (pathVis[it]) {
                return true;
            }
        }

        pathVis[node] = 0;
        return false;
    }

public:
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V] = {0};
        int pathVis[V] = {0};

        for (int i = 0; i < V; i++) {
            parent[i] = -1;
        }

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (dfsCheck(i, adj, vis, pathVis)) {
                    return true;
                }
            }
        }

        return false;
    }
};


