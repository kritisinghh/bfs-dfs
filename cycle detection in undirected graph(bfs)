#include <iostream>
using namespace std;

// detecting cycle in undirected graph (BFS)

bool detect(int src, vector<int> adj, vis){
    vis[src]=1;
    queue<pair<int, int>> q;
    q.push({src, -1});
    while(!q.empty()){
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(int x:adj[node]){
            if (!vis[x]){
                vis[x]=1;
                q.push({x, node});
            }
            else if(x!=parent) return true;
        }
    }
    return false;
}

bool isCycle(int v, vector<int> adj){
    vector<int> vis(v, 0);
    for(int i=0;i<v;i++){
        if (!vis[i]){
             if (detect(i, adj, vis)==true) return true;
         }
    }
    return false;
}

