class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int time=0;
        int row=grid.size();
        int col=grid[0].size();
        queue<pair<int, int>> q;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if (grid[i][j]==2) q.push({i, j});
            }
        }
        vector<pair<int, int>> directions={{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        while(!q.empty()){
            int s=q.size();
            bool rootSpread=false;
            for(int i=0;i<s;i++){
                int x=q.front().first;
                int y=q.front().second;
                q.pop();
                for(auto dir:directions){
                    int nx=x+dir.first;
                    int ny=y+dir.second;
                    if ((nx>=0 && nx<row) && (ny>=0 && ny<col) && grid[nx][ny]==1){
                        grid[nx][ny]=2;
                        rootSpread=true;
                        q.push({nx, ny});
                    }
                }
            }
            if (rootSpread) time++;
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if (grid[i][j]==1) return -1;
            }
        }
        return time;
    }
};
