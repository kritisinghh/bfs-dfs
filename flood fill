class Solution {
    void dfs(int row, int col, vector<vector<int>>& ans,
             vector<vector<int>>& image, int newColor, int delRow[], int delCol[],
             int iniColor) {
        
        ans[row][col] = newColor;
        int n = image.size();
        int m = image[0].size();
        
        for (int i = 0; i < 4; i++) {
            int nrow = row + delRow[i];
            int ncol = col + delCol[i];
            
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                image[nrow][ncol] == iniColor && ans[nrow][ncol] != newColor) {
                dfs(nrow, ncol, ans, image, newColor, delRow, delCol, iniColor);
            }
        }
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        /*
        // BFS
        int m=image.size(), n=image[0].size();
        if (image[sr][sc]==color) return image;
        vector<vector<int>> list=image;
        vector<pair<int, int>> directions={{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        queue<pair<int, int>> q;
        q.push({sr, sc});
        int o=image[sr][sc];
        while(!q.empty()){
            auto [x, y]=q.front();
            q.pop();
            list[x][y]=color;
            for(auto dir:directions){
                int nx=x+dir.first;
                int ny=y+dir.second;
                if (nx>=0 && nx<m && ny>=0 && ny<n && image[nx][ny]==o && list[nx][ny]!=color) q.push({nx, ny});
            }
        }
        return list;
        */

        // DFS
        int iniColor = image[sr][sc];
        vector<vector<int>> ans = image;

        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        dfs(sr, sc, ans, image, color, delRow, delCol, iniColor);

        return ans;
    }
};
