class Solution {
    bool dfs(int node, int col, vector<int> &color, vector<vector<int>> &graph){
        color[node]=col;
        for(int ne:graph[node]){
            if (color[ne]==-1){
                if (dfs(ne, 1-col, color, graph)==false) return false;
            }
            else if(color[ne]==col) return false;
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        /*
        // bfs
        int n=graph.size();
        vector<int> color(n, -1);
        for(int i=0;i<n;i++){
            if (color[i]==-1){
                queue<int> q;
                q.push(i);
                color[i]=0;
                while(!q.empty()){
                    int node=q.front();
                    q.pop();
                    for(int ne:graph[node]){
                        if (color[ne]==-1){
                            color[ne]=1-color[node];
                            q.push(ne);
                        }
                        else if(color[ne]==color[node]) return false;
                    }
                }
            }
        }
        return true;
        */
        // dfs
        int n=graph.size();
        vector<int> color(n, -1);
        for(int i=0;i<n;i++){
            if (color[i]==-1){
                if (dfs(i, 0, color, graph)==false) return false;
            }
        }
        return true;
    }
};
