
// number of distinct islands : here if different islands are of same shape, they are counted as counted

#include <bits/stdc++.h>
using namespace std;

class Solution {
  private: 
  void dfs(int row, int col, vector<vector<int>> &vis, vector<vector<char>>&grid, vector<pair<int, int>> &vec, int row0, int col0) {
      vis[row][col] = 1; 
      int n = grid.size(); 
      int m = grid[0].size();
      vec.push_back({row-row0, col-col0});
      vector<int> delrow={-1, 0, 1, 0};
      vector<int> delcol={0, -1, 0, 1};
      for(int i=0;i<4;i++){
          int nrow=row+delrow[i];
          int ncol=col+delcol[i];
          if (nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]==1){
              dfs(nrow, ncol, vis, grid, vec, row0, col0);
          }
      }
  }
  public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(); 
        int m = grid[0].size(); 
        vector<vector<int>> vis(n, vector<int>(m, 0));
        set<vector<pair<int, int>>> s;
        for(int row = 0; row < n ; row++) {
            for(int col = 0; col < m ;col++) {
                if(!vis[row][col] && grid[row][col] == '1') {
                    vector<pair<int, int>> vec;
                    dfs(row, col, vis, grid, vec, row, col); 
                    s.insert(vec);
                }
            }
        }
        return s.size();
    }
};

int main() {
    // n: row, m: column
    vector<vector<char>> grid
    {
        {'0', '1', '1', '1', '0', '0', '0'},
        {'0', '0', '1', '1', '0', '1', '0'}
    };

        
    Solution obj;
    cout << obj.numIslands(grid) << endl;
        
    return 0;
}
